<?xml version="1.0" encoding="UTF-8"?>
<included>
    <!-- @formatter:off -->
    <!--1.日志格式和颜色渲染 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />

    <!-- 2.属性值定义 -->
    <!--控制台日志格式: console.log.path ->> console.log.pathProxy-->
    <!--日志路径: log.path ->> log.pathProxy-->
    <!--日志格式: log.pattern ->> log.patternProxy-->
    <!--日志保存日期: log.maxHistory ->> log.maxHistoryProxy-->
    <!--日志最大文件大小: log.maxFileSize ->> log.maxFileSizeProxy-->

    <!-- 3.代理属性值定义 -->
    <!-- 彩色日志格式 -->
    <!--日志格式-->
    <property name="console.log.patternProxy" value="${console.log.pattern:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}) %clr(%thread) %highlight(%-5level) %boldMagenta(%logger{50}:%line) %clr(%X{trace}): %msg%n}"/>
    <property name="log.pathProxy" value="${log.path:-./logs}" />
    <property name="log.patternProxy" value="${log.pattern:-%d{yyyy-MM-dd HH:mm:ss.SSS} %thread %-5level %logger{50}:%line %X{trace}: %msg%n}"/>"
    <!--日志最大的历史 7天-->
    <property name="log.maxHistoryProxy" value="${log.maxHistory:-7}"/>
    <!--日志最大的文件大小 20MB-->
    <property name="log.maxFileSizeProxy" value="${log.maxFileSize:-20MB}"/>
    <!--编码-->
    <property name="ENCODING" value="UTF-8"/>
    <!-- 4.日志输出 -->
    <!-- 4.1.控制台打印 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${console.log.patternProxy}</pattern>
            <charset>${ENCODING}</charset>
        </encoder>
        <!-- 按临界值过滤日志：低于DEBUG以下级别被抛弃 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
    </appender>

    <!-- 4.2.debug日志 -->
    <appender name="debug" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.pathProxy}/debug.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${log.patternProxy}</pattern>
            <charset>${ENCODING}</charset>
        </encoder>
        <!-- 按指定规则过滤日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 过滤的级别 -->
            <level>DEBUG</level>
            <!-- 匹配时的操作：接收（记录） -->
            <onMatch>ACCEPT</onMatch>
            <!-- 不匹配时的操作：拒绝（不记录） -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 滚动日志文件保存格式 -->
            <fileNamePattern>${log.pathProxy}/debug.%d{yyyy-MM-dd}.%i.gz</fileNamePattern>
            <!-- 最大保存历史时间 -->
            <maxHistory>${log.maxHistoryProxy}</maxHistory>
            <!-- 最大文件大小 -->
            <maxFileSize>${log.maxFileSizeProxy}</maxFileSize>
        </rollingPolicy>
    </appender>

    <!-- 4.3.info日志 -->
    <appender name="info" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.pathProxy}/info.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${log.patternProxy}</pattern>
            <charset>${ENCODING}</charset>
        </encoder>
        <!-- 按指定规则过滤日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 过滤的级别 -->
            <level>INFO</level>
            <!-- 匹配时的操作：接收（记录） -->
            <onMatch>ACCEPT</onMatch>
            <!-- 不匹配时的操作：拒绝（不记录） -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 滚动日志文件保存格式 -->
            <fileNamePattern>${log.pathProxy}/info.%d{yyyy-MM-dd}.%i.gz</fileNamePattern>
            <!-- 最大保存历史时间 -->
            <maxHistory>${log.maxHistoryProxy}</maxHistory>
            <!-- 最大文件大小 -->
            <maxFileSize>${log.maxFileSizeProxy}</maxFileSize>
        </rollingPolicy>
    </appender>

    <!-- 4.4.warn日志 -->
    <appender name="warn" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.pathProxy}/warn.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${log.patternProxy}</pattern>
            <charset>${ENCODING}</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 过滤的级别 -->
            <level>WARN</level>
            <!-- 匹配时的操作：接收（记录） -->
            <onMatch>ACCEPT</onMatch>
            <!-- 不匹配时的操作：拒绝（不记录） -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 滚动日志文件保存格式 -->
            <fileNamePattern>${log.pathProxy}/warn.%d{yyyy-MM-dd}.%i.gz</fileNamePattern>
            <!-- 最大保存历史时间 -->
            <maxHistory>${log.maxHistoryProxy}</maxHistory>
            <!-- 最大文件大小 -->
            <maxFileSize>${log.maxFileSizeProxy}</maxFileSize>
        </rollingPolicy>
    </appender>

    <!-- 4.5.error日志 -->
    <appender name="error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.pathProxy}/error.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${log.patternProxy}</pattern>
            <charset>${ENCODING}</charset>
        </encoder>
        <!-- 按指定规则过滤日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 过滤的级别 -->
            <level>ERROR</level>
            <!-- 匹配时的操作：接收（记录） -->
            <onMatch>ACCEPT</onMatch>
            <!-- 不匹配时的操作：拒绝（不记录） -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 滚动日志文件保存格式 -->
            <fileNamePattern>${log.pathProxy}/error.%d{yyyy-MM-dd}.%i.gz</fileNamePattern>
            <!-- 最大保存历史时间 -->
            <maxHistory>${log.maxHistoryProxy}</maxHistory>
            <!-- 最大文件大小 -->
            <maxFileSize>${log.maxFileSizeProxy}</maxFileSize>
        </rollingPolicy>
    </appender>

    <!-- 4.6. 所有日志 -->
    <appender name="all" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.pathProxy}/all.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${log.patternProxy}</pattern>
            <charset>${ENCODING}</charset>
        </encoder>
        <!-- 按临界值过滤日志：低于DEBUG以下级别被抛弃 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 滚动日志文件保存格式 -->
            <fileNamePattern>${log.pathProxy}/all.%d{yyyy-MM-dd}.%i.gz</fileNamePattern>
            <!-- 最大保存历史时间 -->
            <maxHistory>${log.maxHistoryProxy}</maxHistory>
            <!-- 最大文件大小 -->
            <maxFileSize>${log.maxFileSizeProxy}</maxFileSize>
        </rollingPolicy>
    </appender>

    <!-- 5.异步日志输出 -->
    <!-- 5.1. 异步console日志 -->
    <appender name="async-console" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>1024</queueSize>
        <!--打印堆栈信息-->
        <includeCallerData>true</includeCallerData>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="console"/>
    </appender>

    <!-- 5.2. 异步degug日志 -->
    <appender name="async-debug" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>1024</queueSize>
        <!--打印堆栈信息-->
        <includeCallerData>true</includeCallerData>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="debug"/>
    </appender>

    <!-- 5.3. 异步info日志 -->
    <appender name="async-info" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>1024</queueSize>
        <!--打印堆栈信息-->
        <includeCallerData>true</includeCallerData>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="info"/>
    </appender>

    <!-- 5.4. 异步warn日志 -->
    <appender name="async-warn" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>1024</queueSize>
        <!--打印堆栈信息-->
        <includeCallerData>true</includeCallerData>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="warn"/>
    </appender>

    <!-- 5.5. 异步error日志 -->
    <appender name="async-error" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>1024</queueSize>
        <!--打印堆栈信息-->
        <includeCallerData>true</includeCallerData>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="error"/>
    </appender>

    <!-- 5.6. 异步all日志 -->
    <appender name="async-all" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>1024</queueSize>
        <!--打印堆栈信息-->
        <includeCallerData>true</includeCallerData>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="all"/>
    </appender>

    <springProperty scope="context" name="logUrl" source="ticho.trace.logUrl" defaultValue = ""/>
    <springProperty scope="context" name="pushLog" source="ticho.trace.pushLog" defaultValue = "false"/>
    <springProperty scope="context" name="secret" source="ticho.trace.secret" defaultValue = ""/>
    <springProperty scope="context" name="appName" source="spring.application.name" defaultValue = "UNKNOWN"/>
    <springProperty scope="context" name="env" source="spring.profiles.active" defaultValue = "UNKNOWN"/>

    <appender name="trace" class="top.ticho.trace.core.logback.DistributedLogAppender">
        <appName>${appName}</appName>
        <env>${env}</env>
        <url>${logUrl}</url>
        <pushLog>${pushLog}</pushLog>
        <secret>${secret}</secret>
        <pushSize>50</pushSize>
        <flushInterval>1000</flushInterval>
    </appender>

    <springProfile name="local,dev,test,st">
        <!-- 日志输出级别 -->
        <root level="INFO">
            <appender-ref ref="async-console"/>
            <appender-ref ref="async-debug"/>
            <appender-ref ref="async-info"/>
            <appender-ref ref="async-warn"/>
            <appender-ref ref="async-error"/>
            <appender-ref ref="async-all"/>
            <appender-ref ref="trace"/>
        </root>
    </springProfile>
    <springProfile name="prod,uat">
        <!-- 日志输出级别 -->
        <root level="INFO">
            <appender-ref ref="async-console"/>
            <appender-ref ref="async-info"/>
            <appender-ref ref="async-warn"/>
            <appender-ref ref="async-error"/>
            <appender-ref ref="async-all"/>
            <appender-ref ref="trace"/>
        </root>
    </springProfile>

</included>