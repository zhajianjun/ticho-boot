package top.ticho.rainbow.interfaces.facade;

import lombok.RequiredArgsConstructor;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import ${package.service}.${className.service};
import top.ticho.rainbow.infrastructure.common.annotation.ApiLog;
import top.ticho.rainbow.infrastructure.common.constant.ApiConst;
import ${package.modifyCommand}.${className.modifyCommand};
import ${package.saveCommand}.${className.saveCommand};
import top.ticho.rainbow.interfaces.command.VersionModifyCommand;
import ${package.query}.${className.query};
import ${package.dto}.${className.dto};
import top.ticho.starter.view.core.TiPageResult;
import top.ticho.starter.view.core.TiResult;
import top.ticho.starter.web.annotation.TiView;

import java.io.IOException;
<% var lowEntity = strutil.toLowerCase(strutil.subStringTo(table.entityName,0,1))+strutil.subString(table.entityName,1); %>
<% var uperEntity = strutil.toUpperCase(table.entityName); %>

/**
 * ${table.comment!}
 *
 * @author ${author!}
 * @date ${date!}
 */
@Validated
@RequiredArgsConstructor
@RestController
@RequestMapping("${lowEntity}")
public class ${className.controller} {
    private final ${className.service} ${lowEntity}Service;

    /**
     * 保存${table.comment!}
     */
    @ApiLog("保存${table.comment!}")
    @PreAuthorize("@perm.hasPerms('" + ApiConst.SYSTEM_${uperEntity}_SAVE + "')")
    @PostMapping
    public TiResult<Void> save(@Validated @RequestBody ${className.saveCommand} ${lowEntity}SaveCommand) {
        ${lowEntity}Service.save(${lowEntity}SaveCommand);
        return TiResult.ok();
    }

    /**
     * 删除${table.comment!}
     */
    @ApiLog("删除${table.comment!}")
    @PreAuthorize("@perm.hasPerms('" + ApiConst.SYSTEM_${uperEntity}_REMOVE + "')")
    @DeleteMapping
    public TiResult<Void> remove(@Validated @RequestBody VersionModifyCommand command) {
        ${lowEntity}Service.remove(command);
        return TiResult.ok();
    }

    /**
     * 修改${table.comment!}
     */
    @ApiLog("修改${table.comment!}")
    @PreAuthorize("@perm.hasPerms('" + ApiConst.SYSTEM_${uperEntity}_MODIFY + "')")
    @PutMapping
    public TiResult<Void> modify(@Validated @RequestBody ${className.modifyCommand} ${lowEntity}ModifyfCommand) {
        ${lowEntity}Service.modify(${lowEntity}ModifyfCommand);
        return TiResult.ok();
    }

    /**
     * 查询${table.comment!}(分页)
     */
    @PreAuthorize("@perm.hasPerms('" + ApiConst.SYSTEM_${uperEntity}_PAGE + "')")
    @GetMapping("page")
    public TiResult<TiPageResult<${className.dto}>> page(@Validated ${className.query} ${lowEntity}Query) {
        return TiResult.ok(${lowEntity}Service.page(${lowEntity}Query));
    }

    /**
     * 导出${table.comment!}信息
     */
    @ApiLog("导出${table.comment!}信息")
    @TiView(ignore = true)
    @PreAuthorize("@perm.hasPerms('" + ApiConst.SYSTEM_${uperEntity}_EXPORT + "')")
    @GetMapping("excel/export")
    public void exportExcel(@Validated ${className.query} ${lowEntity}Query) throws IOException {
        ${lowEntity}Service.exportExcel(${lowEntity}Query);
    }

}
